// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ServiceConverter.Source.resources.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using ServiceConverter.Source.Entity;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Rajesh\Documents\Visual Studio 2015\Projects\Kumar_Project\ServiceConverter\ServiceConverter\Source\resources\Templates\IWcfServiceTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class IWcfServiceTemplate : IWcfServiceTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing DataContract.Entities;\r\nusing System.ServiceModel;\r\n");
            
            #line 11 "C:\Users\Rajesh\Documents\Visual Studio 2015\Projects\Kumar_Project\ServiceConverter\ServiceConverter\Source\resources\Templates\IWcfServiceTemplate.tt"
    GenerateUsingList(C.UsingList);
            
            #line default
            #line hidden
            this.Write("\r\nnamespace ");
            
            #line 13 "C:\Users\Rajesh\Documents\Visual Studio 2015\Projects\Kumar_Project\ServiceConverter\ServiceConverter\Source\resources\Templates\IWcfServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(C.NewNameSpace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\t/*\r\n\tThis class was auto generated by WCF-Converter based on input WebServi" +
                    "ce dll\r\n\t*/\r\n\t[ServiceContract]\r\n    public interface I");
            
            #line 19 "C:\Users\Rajesh\Documents\Visual Studio 2015\Projects\Kumar_Project\ServiceConverter\ServiceConverter\Source\resources\Templates\IWcfServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(C.ClassName));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n\t\t");
            
            #line 21 "C:\Users\Rajesh\Documents\Visual Studio 2015\Projects\Kumar_Project\ServiceConverter\ServiceConverter\Source\resources\Templates\IWcfServiceTemplate.tt"
    GenerateOperationContract(C.Methods, IsServiceContract, "\t\t");
            
            #line default
            #line hidden
            this.Write("        \t\t\r\n\t}\r\n}\r\n\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 27 "C:\Users\Rajesh\Documents\Visual Studio 2015\Projects\Kumar_Project\ServiceConverter\ServiceConverter\Source\resources\Templates\IWcfServiceTemplate.tt"

    
    public void GenerateOperationContract(IList<Method> methods, bool isServiceContract, string indent)
    {
        NextLine();
        var dataMemberFormat = "{0} {1}({2});";
        var signature = "[OperationContract]";
        foreach(var method in methods)
        {
            var nonExposed = "";
            if(!method.IsOperationExposed){
                nonExposed = "//";
            }
            Write( indent + (method.IsOperationExposed ?  signature : "//This method was not exposed in the web service"));
            NextLine();
            var returnType = GetType(method.OutputParameter, "void");
            var inputParam = "";
            foreach(var input in method.InputParameters){
                    
                if(!string.IsNullOrWhiteSpace(inputParam))
                    inputParam = inputParam + ", ";

                inputParam = inputParam +  GetType(input, "")+" "+ input.Name + (input.HasDefaultValueImpl ? " = null" : "");
            }

            Write(indent + nonExposed + string.Format(dataMemberFormat, returnType, method.Name, inputParam));
 
            NextLine();
            NextLine();

        }

            
    }

    private string GetType(Parameter p, string defaultVal){
        var response = defaultVal;

        if(p != null){
            if(p.IsGeneric){
                response = p.GenericName.Substring(0, p.GenericName.IndexOf('`')) + "<" + p.Type + ">";         
            }else{
                response = (p.Type.Equals("Void")? "void": p.Type);
            }

            if(p.IsRef)
                response = "ref " + response;
        }

        return response;
    }
                     

    public void NextLine(){

        WriteLine(string.Empty);
    }

    public void GenerateUsingList(HashSet<string> usingList){
        if(usingList != null && usingList.Count > 0){
            HashSet<string> finalUsingList = new HashSet<string>();
            foreach(var i in usingList){
                if(!string.IsNullOrWhiteSpace(i) && i.Contains('.')){
                    var x = i.Substring(0, i.LastIndexOf('.'));
                    finalUsingList.Add(x);
                }                                
            }  
            var output = "";
            foreach(var input in finalUsingList){
                if(!input.Equals("System")){
                    var correctNameSpace = input;
                    var x = NameSpaceMapping.Where(i => i.Key == input).Count();
                    var match= "";

                    if(x > 0)
                        match = NameSpaceMapping.First(i => i.Key == input).Value;

                    if(!string.IsNullOrWhiteSpace(match))
                        correctNameSpace = match;

                    output = output + "using " + correctNameSpace +";" + Environment.NewLine;
                }        
            }

            if(! string.IsNullOrWhiteSpace(output)){
                NextLine();
                WriteLine(output);
            }
        }
    }

    public Class C {get; set;} 
    public bool IsServiceContract {get; set;}
    public List<KeyValuePair<string, string>> NameSpaceMapping {get; set;}

    
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class IWcfServiceTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
