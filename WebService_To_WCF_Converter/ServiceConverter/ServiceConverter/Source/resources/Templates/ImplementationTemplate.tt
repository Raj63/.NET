<#@ template language="C#" #>
<#@ output extension=".cs"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ServiceConverter.Source.Entity" #>
using System;
using System.Linq;
using System.Text;

<#    GenerateUsingList(C.UsingList);#>

namespace <#=        C.NewNameSpace#>
{
	/*
	This class was auto generated by WCF-Converter based on input WebService dll
	*/
	
    public class <#=        C.ClassName #>
    {
		<#    GenerateOperation(C.Methods, "\t\t");#>
        		
	}
}


<#+
    public void GenerateOperation(IList<Method> methods, string indent)
    {
        NextLine();
        var dataMemberFormat = "{0} {1} {2}({3})"; 
        foreach(var method in methods)
        {

            //Write(indent + signature);
            NextLine();
            var returnType = GetType(method.OutputParameter, "void");
            var inputParam = "";
            foreach(var input in method.InputParameters){
                    
                if(!string.IsNullOrWhiteSpace(inputParam))
                    inputParam = inputParam + ", ";

                inputParam = inputParam +  GetType(input, "")+" "+ input.Name + (input.HasDefaultValueImpl ? " = null" : "");
            }

            WriteLine(indent + string.Format(dataMemberFormat, method.AccessType, returnType, method.Name, inputParam));
            if(!string.IsNullOrWhiteSpace(method.MethodBody)){
                
                WriteLine(indent + method.MethodBody);
            }else{
                WriteLine(indent + "{");
                //WriteLine(indent + "//~"+ method.Name+"("+ inputParam +"))~//");
                WriteLine(indent + "throw new NotImplementedException();");
                WriteLine(indent + "}");
            }

            NextLine();
            NextLine();

        }

            
    }

    private string GetType(Parameter p, string defaultVal){
        var response = defaultVal;

        if(p != null){
            if(p.IsGeneric){
                response = p.GenericName.Substring(0, p.GenericName.IndexOf('`')) + "<" + p.Type + ">";         
            }else{
                response = (p.Type.Equals("Void")? "void": p.Type);
            }

            if(p.IsRef)
                response = "ref " + response;
        }

        return response;
    }
                     

    public void NextLine(){

        WriteLine(string.Empty);
    }

    public void GenerateUsingList(HashSet<string> usingList){
        if(usingList != null && usingList.Count > 0){
            HashSet<string> finalUsingList = new HashSet<string>();
            foreach(var i in usingList){
                if(!string.IsNullOrWhiteSpace(i) && i.Contains('.')){
                    var x = i.Substring(0, i.LastIndexOf('.'));
                    finalUsingList.Add(x);
                }                                
            }  
            var output = "";
            foreach(var input in finalUsingList){
                if(!input.Equals("System")){
                    var correctNameSpace = input;
                    var x = NameSpaceMapping.Where(i => i.Key == input).Count();
                    var match= "";

                    if(x > 0)
                        match = NameSpaceMapping.First(i => i.Key == input).Value;

                    if(!string.IsNullOrWhiteSpace(match))
                        correctNameSpace = match;

                    output = output + "using " + correctNameSpace +";" + Environment.NewLine;
                }        
            }

            if(! string.IsNullOrWhiteSpace(output)){
                NextLine();
                WriteLine(output);
            }
        }
    }

    public Class C {get; set;} 
    public List<KeyValuePair<string, string>> NameSpaceMapping {get; set;}

    #>